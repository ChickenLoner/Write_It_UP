import os
from pathlib import Path
from collections import defaultdict
from urllib.parse import quote

# Source folder (repo root)
SRC_DIR = Path(".")

def find_all_writeups():
    """Find all markdown files organized by folder."""
    folders = defaultdict(list)
    
    for root, dirs, files in os.walk(SRC_DIR):
        # Skip certain directories
        dirs[:] = [d for d in dirs if d not in ["build", ".github", ".git", "node_modules"]]
        
        for file in files:
            if file.endswith(".md") and file.lower() != "readme.md":
                full_path = Path(root) / file
                folder = full_path.parent.relative_to(SRC_DIR)
                folders[folder].append(full_path)
    
    return folders

def generate_toc_markdown(folders):
    """Generate markdown TOC from folders and files."""
    lines = [
        "# 🔐 Chicken0248's Write-Ups Collection",
        "",
        "Welcome to my collection of CTF (Capture The Flag) write-ups! This repository contains detailed solutions and analysis for various cybersecurity challenges.",
        "",
        "🌐 **Live Site**: [https://chickenloner.github.io/Write_It_UP/](https://chickenloner.github.io/Write_It_UP/)",
        "",
        "---",
        "",
        "## 📚 Table of Contents",
        ""
    ]
    
    # Count total writeups
    total = sum(len(files) for files in folders.values())
    lines.append(f"**Total Write-ups**: {total}")
    lines.append("")
    
    # Sort folders
    sorted_folders = sorted(folders.keys(), key=lambda x: str(x))
    
    for folder in sorted_folders:
        files = sorted(folders[folder], key=lambda x: x.stem)
        
        # Create folder heading
        if str(folder) == ".":
            folder_name = "📁 Root"
        else:
            folder_name = f"📁 {str(folder).replace(os.sep, ' → ')}"
        
        lines.append(f"### {folder_name}")
        lines.append("")
        
        # Create a collapsible section for folders with many files
        if len(files) > 5:
            lines.append("<details>")
            lines.append(f"<summary>📝 {len(files)} write-ups (click to expand)</summary>")
            lines.append("")
        
        # List files
        for file in files:
            # Create GitHub link to the markdown file
            relative_path = file.relative_to(SRC_DIR).as_posix()
            # URL encode the path to handle spaces and special characters
            encoded_path = quote(relative_path)
            # Clean up the display name
            name = file.stem
            lines.append(f"- [{name}]({encoded_path})")
        
        # Close collapsible section if it was opened
        if len(files) > 5:
            lines.append("")
            lines.append("</details>")
        
        lines.append("")
    
    # Add footer
    lines.extend([
        "---",
        "",
        "## 🚀 About",
        "",
        "This repository contains my personal write-ups for various CTF challenges and cybersecurity labs from platforms including:",
        "",
        "- 🎯 TryHackMe",
        "- 🔍 HackTheBox",
        "- 🛡️ LetsDefend",
        "- 🔐 CyberDefenders",
        "- 💙 Security Blue Team",
        "- 🧩 And more...",
        "",
        "## 📝 Usage",
        "",
        "- Browse the [live site](https://chickenloner.github.io/Write_It_UP/) for a better reading experience",
        "- Or navigate through the folders above to read the markdown files directly on GitHub",
        "",
        "## ⚠️ Disclaimer",
        "",
        "These write-ups are for educational purposes only. Please respect the platforms' rules and guidelines.",
        "",
        "---",
        "",
        "*Last updated: Auto-generated by GitHub Actions*",
        ""
    ])
    
    return "\n".join(lines)

def update_readme():
    """Update README.md with generated TOC."""
    folders = find_all_writeups()
    
    if not folders:
        print("❌ No markdown files found!")
        return
    
    readme_content = generate_toc_markdown(folders)
    
    readme_path = SRC_DIR / "README.md"
    with readme_path.open("w", encoding="utf-8") as f:
        f.write(readme_content)
    
    print(f"✅ README.md updated with {sum(len(f) for f in folders.values())} write-ups")

if __name__ == "__main__":
    update_readme()